{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","reportWebVitals.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","company","location","created_at","split","splice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","useState","setOpen","selectedJob","selectJob","numJobs","length","numPages","Math","floor","activeStep","setActiveStep","jobsOnPage","slice","component","map","i","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","JOB_API_URL","updateCb","a","fetch","res","json","console","log","App","jobList","updateJobs","useEffect","fetchJobs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9a3841d.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport default function Job({ job, onClick}) {\r\n  return (\r\n    <Paper onClick = {onClick} className={\"job\"}>\r\n      <div>\r\n        <Typography variant=\"h6\">{job.title}</Typography>\r\n        <Typography variant=\"h5\">{job.company}</Typography>\r\n        <Typography>{job.location}</Typography>\r\n      </div>\r\n\r\n      <div>\r\n        <Typography>\r\n          {job.created_at.split(\" \").splice(0, 3).join(\" \")}\r\n        </Typography>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModal({job, open, handleClose}) {\r\n\r\n    if(!job.title){\r\n        return <div></div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-slide-title\">\r\n              {job.title} - \r\n               {job.company}\r\n              <img className = {'detail-logo'} src = {job.company_logo} />\r\n            </DialogTitle>\r\n              \r\n          <DialogContent>\r\n            <DialogContentText dangerouslySetInnerHTML={{__html: job.description}} id=\"alert-dialog-slide-description\"/>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Close\r\n            </Button>\r\n            <a href = {job.url} target =\"_blank\">\r\n                <Button color=\"primary\">\r\n                Apply\r\n                </Button>\r\n            </a>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogueTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialogue from \"@material-ui/core/Dialog\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\n\r\nimport Job from \"./Job\";\r\nimport JobModal from \"./JobModal\";\r\n\r\nexport default function Jobs({ jobs }) {\r\n\r\n\r\n//Modal\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedJob, selectJob] = React.useState({});\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n//Pagination\r\n  const jobsPerPage = 20; \r\n  const numJobs = jobs.length; \r\n  const numPages = Math.floor(numJobs / jobsPerPage);\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const jobsOnPage = jobs.slice(activeStep*jobsPerPage, (activeStep*jobsPerPage)+jobsPerPage);\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"jobs\">\r\n        <JobModal open ={open} job = {selectedJob} handleClose = {handleClose}></JobModal>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n        Entry Level Job Searcher\r\n      </Typography>\r\n      <Typography variant=\"h6\">\r\n          Found {numJobs} Jobs\r\n      </Typography>\r\n      {\r\n      \r\n      \r\n      jobsOnPage.map(\r\n          (job, i) => (<Job key = {i} job={job} onClick = {() => {\r\n            handleClickOpen();\r\n            selectJob(job) \r\n          }}/>\r\n      ))\r\n      \r\n      }\r\n      <div>\r\n          Page {activeStep+1} of {numPages}\r\n      </div>\r\n\r\n      <MobileStepper\r\n        variant=\"progress\"\r\n        steps={numPages}\r\n        position=\"static\"\r\n        activeStep={activeStep}\r\n        nextButton={\r\n          <Button size=\"small\" onClick={handleNext} disabled={activeStep === numPages-1}>\r\n            Next\r\n            <KeyboardArrowRight />\r\n          </Button>\r\n        }\r\n        backButton={\r\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n            <KeyboardArrowLeft />\r\n            Back\r\n          </Button>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import fetch from 'node-fetch';\nimport React from 'react';\nimport './App.css';\nimport Jobs from './Jobs';\n\n\nconst JOB_API_URL = '/api/jobs'\n\nconst mockJobs = [\n\n  {title: 'SWE 1', company: 'Google'},\n  {title: 'SWE 1', company: 'Apple'}\n\n]\n\n\nasync function fetchJobs (updateCb){\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCb(json);\n\n  console.log({json});\n} \n\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([]);\n\nReact.useEffect(()=>{\n  fetchJobs(updateJobs);\n}, [])\n\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}